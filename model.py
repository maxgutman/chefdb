#autogenerated by sqlautocode

from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relation

engine = create_engine('mysql://root:@localhost/chefs', convert_unicode=True)
DeclarativeBase = declarative_base()
metadata = DeclarativeBase.metadata
metadata.bind = engine

Chef_Award = Table(u'Chef_Award', metadata,
    Column(u'id', INTEGER(), primary_key=True, nullable=False),
    Column(u'chef_id', INTEGER(), ForeignKey('Chef.id'), nullable=False),
    Column(u'award_id', INTEGER(), ForeignKey('Award.id'), nullable=False),
    Column(u'year', DATE()),
)

Chef_Restaurant = Table(u'Chef_Restaurant', metadata,
    Column(u'id', INTEGER(), primary_key=True, nullable=False),
    Column(u'chef_id', INTEGER(), ForeignKey('Chef.id'), nullable=False),
    Column(u'restaurant_id', INTEGER(), ForeignKey('Restaurant.id'), nullable=False),
    Column(u'date_since', DATE(), nullable=False),
)

Restaurant_Cuisine = Table(u'Restaurant_Cuisine', metadata,
    Column(u'id', INTEGER(), primary_key=True, nullable=False),
    Column(u'restaurant_id', INTEGER(), ForeignKey('Restaurant.id'), nullable=False),
    Column(u'cuisine_id', INTEGER(), ForeignKey('Cuisine.id'), nullable=False),
)

User_Favorited = Table(u'User_Favorited', metadata,
    Column(u'id', INTEGER(), primary_key=True, nullable=False),
    Column(u'user_id', INTEGER(), ForeignKey('User.id'), nullable=False),
    Column(u'restaurant_id', INTEGER(), ForeignKey('Restaurant.id'), nullable=False),
    Column(u'has_visited', Integer(), nullable=False),
    Column(u'wants_to_visit', Integer(), nullable=False),
)

class ApiKey(DeclarativeBase):
    __tablename__ = 'API_Keys'

    __table_args__ = {}

    #column definitions
    app_description = Column(u'app_description', TEXT())
    app_key = Column(u'app_key', VARCHAR(length=50), nullable=False)
    app_name = Column(u'app_name', VARCHAR(length=128))
    app_url = Column(u'app_url', VARCHAR(length=128))
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    oauth_redirect_url = Column(u'oauth_redirect_url', VARCHAR(length=128))
    status = Column(u'status', INTEGER(), nullable=False)
    user_id = Column(u'user_id', INTEGER(), ForeignKey('User.id'), nullable=False)

    #relation definitions
    User = relation('User', primaryjoin='ApiKey.user_id==User.id')


class Award(DeclarativeBase):
    __tablename__ = 'Award'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    name = Column(u'name', VARCHAR(length=255))
    organization = Column(u'organization', VARCHAR(length=255))

    #relation definitions
    Chefs = relation('Chef', primaryjoin='Award.id==ChefAward.award_id', secondary=Chef_Award, secondaryjoin='ChefAward.chef_id==Chef.id')


class Chef(DeclarativeBase):
    __tablename__ = 'Chef'

    __table_args__ = {}

    #column definitions
    biography = Column(u'biography', TEXT())
    birth_date = Column(u'birth_date', DATE())
    birth_place = Column(u'birth_place', VARCHAR(length=100))
    cooking_style = Column(u'cooking_style', VARCHAR(length=100))
    first_name = Column(u'first_name', VARCHAR(length=30), nullable=False)
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    last_name = Column(u'last_name', VARCHAR(length=30), nullable=False)
    michelin_stars = Column(u'michelin_stars', DECIMAL(precision=4, scale=1))

    #relation definitions
    Awards = relation('Award', primaryjoin='Chef.id==ChefAward.chef_id', secondary=Chef_Award, secondaryjoin='ChefAward.award_id==Award.id')
    Restaurants = relation('Restaurant', primaryjoin='Chef.id==ChefRestaurant.chef_id', secondary=Chef_Restaurant, secondaryjoin='ChefRestaurant.restaurant_id==Restaurant.id')


class ChefAppearance(DeclarativeBase):
    __tablename__ = 'Chef_Appearance'

    __table_args__ = {}

    #column definitions
    appearance = Column(u'appearance', VARCHAR(length=255), nullable=False)
    chef_id = Column(u'chef_id', INTEGER(), ForeignKey('Chef.id'), nullable=False)
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    year = Column(u'year', DATE())

    #relation definitions
    Chef = relation('Chef', primaryjoin='ChefAppearance.chef_id==Chef.id')


class ChefAward(DeclarativeBase):
    __table__ = Chef_Award


    #relation definitions
    Chef = relation('Chef', primaryjoin='ChefAward.chef_id==Chef.id')
    Award = relation('Award', primaryjoin='ChefAward.award_id==Award.id')


class ChefBook(DeclarativeBase):
    __tablename__ = 'Chef_Book'

    __table_args__ = {}

    #column definitions
    chef_id = Column(u'chef_id', INTEGER(), ForeignKey('Chef.id'), nullable=False)
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    isbn = Column(u'isbn', VARCHAR(length=255))
    title = Column(u'title', VARCHAR(length=255), nullable=False)
    year = Column(u'year', DATE())

    #relation definitions
    Chef = relation('Chef', primaryjoin='ChefBook.chef_id==Chef.id')


class ChefFeatured(DeclarativeBase):
    __tablename__ = 'Chef_Featured'

    __table_args__ = {}

    #column definitions
    chef_id = Column(u'chef_id', INTEGER(), ForeignKey('Chef.id'), nullable=False)
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    position = Column(u'position', INTEGER(), nullable=False)

    #relation definitions
    Chef = relation('Chef', primaryjoin='ChefFeatured.chef_id==Chef.id')


class ChefPhoto(DeclarativeBase):
    __tablename__ = 'Chef_Photo'

    __table_args__ = {}

    #column definitions
    chef_id = Column(u'chef_id', INTEGER(), ForeignKey('Chef.id'), nullable=False)
    created = Column(u'created', DATETIME(), nullable=False)
    filename = Column(u'filename', VARCHAR(length=255), nullable=False)
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    order = Column(u'order', Integer(), nullable=False)

    #relation definitions
    Chef = relation('Chef', primaryjoin='ChefPhoto.chef_id==Chef.id')


class ChefRestaurant(DeclarativeBase):
    __table__ = Chef_Restaurant


    #relation definitions
    Restaurant = relation('Restaurant', primaryjoin='ChefRestaurant.restaurant_id==Restaurant.id')
    Chef = relation('Chef', primaryjoin='ChefRestaurant.chef_id==Chef.id')


class Cuisine(DeclarativeBase):
    __tablename__ = 'Cuisine'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    name = Column(u'name', VARCHAR(length=255), nullable=False)

    #relation definitions
    Restaurants = relation('Restaurant', primaryjoin='Cuisine.id==RestaurantCuisine.cuisine_id', secondary=Restaurant_Cuisine, secondaryjoin='RestaurantCuisine.restaurant_id==Restaurant.id')


class Pageview(DeclarativeBase):
    __tablename__ = 'Pageview'

    __table_args__ = {}

    #column definitions
    datetime = Column(u'datetime', DATETIME(), nullable=False)
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    ipaddress = Column(u'ipaddress', VARCHAR(length=45))
    page = Column(u'page', VARCHAR(length=255), nullable=False)

    #relation definitions


class Restaurant(DeclarativeBase):
    __tablename__ = 'Restaurant'

    __table_args__ = {}

    #column definitions
    address_1 = Column(u'address_1', VARCHAR(length=255))
    address_2 = Column(u'address_2', VARCHAR(length=255))
    alcohol = Column(u'alcohol', Integer())
    alcohol_bar = Column(u'alcohol_bar', Integer())
    alcohol_beerwine = Column(u'alcohol_beerwine', Integer())
    alcohol_byob = Column(u'alcohol_byob', Integer())
    attire = Column(u'attire', Enum(u'streetwear', u'casual', u'business casual', u'smart casual', u'formal'))
    city = Column(u'city', VARCHAR(length=255))
    country = Column(u'country', VARCHAR(length=50))
    description = Column(u'description', TEXT(), nullable=False)
    fax = Column(u'fax', VARCHAR(length=20))
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    latitude = Column(u'latitude', VARCHAR(length=20))
    longitude = Column(u'longitude', VARCHAR(length=20))
    map_zoom = Column(u'map_zoom', VARCHAR(length=2))
    meal_breakfast = Column(u'meal_breakfast', Integer())
    meal_dinner = Column(u'meal_dinner', Integer())
    meal_lunch = Column(u'meal_lunch', Integer())
    menu_url = Column(u'menu_url', VARCHAR(length=255))
    michelin_stars = Column(u'michelin_stars', DECIMAL(precision=4, scale=1))
    name = Column(u'name', VARCHAR(length=255), nullable=False)
    parking_garage = Column(u'parking_garage', Integer(), nullable=False)
    parking_street = Column(u'parking_street', Integer())
    parking_valet = Column(u'parking_valet', Integer())
    phone = Column(u'phone', VARCHAR(length=20))
    postal_code = Column(u'postal_code', VARCHAR(length=50))
    price_level = Column(u'price_level', Enum(u'1', u'2', u'3', u'4', u'5'))
    smoking = Column(u'smoking', Integer())
    state_province = Column(u'state_province', VARCHAR(length=50))
    website_url = Column(u'website_url', VARCHAR(length=255))
    yelp_url = Column(u'yelp_url', VARCHAR(length=255))
    zagat_url = Column(u'zagat_url', VARCHAR(length=255))

    #relation definitions
    Chefs = relation('Chef', primaryjoin='Restaurant.id==ChefRestaurant.restaurant_id', secondary=Chef_Restaurant, secondaryjoin='ChefRestaurant.chef_id==Chef.id')
    Cuisines = relation('Cuisine', primaryjoin='Restaurant.id==RestaurantCuisine.restaurant_id', secondary=Restaurant_Cuisine, secondaryjoin='RestaurantCuisine.cuisine_id==Cuisine.id')
    Users = relation('User', primaryjoin='Restaurant.id==UserFavorited.restaurant_id', secondary=User_Favorited, secondaryjoin='UserFavorited.user_id==User.id')

    @property
    def price_symbol(self):
        return '$' * int(self.price_level or 1)

class RestaurantCuisine(DeclarativeBase):
    __table__ = Restaurant_Cuisine


    #relation definitions
    Restaurant = relation('Restaurant', primaryjoin='RestaurantCuisine.restaurant_id==Restaurant.id')
    Cuisine = relation('Cuisine', primaryjoin='RestaurantCuisine.cuisine_id==Cuisine.id')


class RestaurantFeatured(DeclarativeBase):
    __tablename__ = 'Restaurant_Featured'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    position = Column(u'position', INTEGER(), nullable=False)
    restaurant_id = Column(u'restaurant_id', INTEGER(), ForeignKey('Restaurant.id'), nullable=False)

    #relation definitions
    Restaurant = relation('Restaurant', primaryjoin='RestaurantFeatured.restaurant_id==Restaurant.id')


class RestaurantHour(DeclarativeBase):
    __tablename__ = 'Restaurant_Hours'

    __table_args__ = {}

    #column definitions
    day_of_week = Column(u'day_of_week', SMALLINT(), nullable=False)
    end_time = Column(u'end_time', TIME(), nullable=False)
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    restaurant_id = Column(u'restaurant_id', INTEGER(), ForeignKey('Restaurant.id'), nullable=False)
    start_time = Column(u'start_time', TIME(), nullable=False)

    #relation definitions
    Restaurant = relation('Restaurant', primaryjoin='RestaurantHour.restaurant_id==Restaurant.id')


class RestaurantPhoto(DeclarativeBase):
    __tablename__ = 'Restaurant_Photo'

    __table_args__ = {}

    #column definitions
    created = Column(u'created', DATETIME(), nullable=False)
    filename = Column(u'filename', VARCHAR(length=255), nullable=False)
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    order = Column(u'order', Integer(), nullable=False)
    restaurant_id = Column(u'restaurant_id', INTEGER(), ForeignKey('Restaurant.id'), nullable=False)

    #relation definitions
    Restaurant = relation('Restaurant', primaryjoin='RestaurantPhoto.restaurant_id==Restaurant.id')


class User(DeclarativeBase):
    __tablename__ = 'User'

    __table_args__ = {}

    #column definitions
    date_joined = Column(u'date_joined', DATETIME())
    email = Column(u'email', VARCHAR(length=75), nullable=False)
    first_name = Column(u'first_name', VARCHAR(length=30), nullable=False)
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    is_active = Column(u'is_active', Integer(), nullable=False)
    is_staff = Column(u'is_staff', Integer(), nullable=False)
    is_superuser = Column(u'is_superuser', Integer(), nullable=False)
    last_login = Column(u'last_login', DATETIME())
    last_name = Column(u'last_name', VARCHAR(length=30), nullable=False)
    password = Column(u'password', VARCHAR(length=128), nullable=False)
    username = Column(u'username', VARCHAR(length=30), nullable=False)

    #relation definitions
    Restaurants = relation('Restaurant', primaryjoin='User.id==UserFavorited.user_id', secondary=User_Favorited, secondaryjoin='UserFavorited.restaurant_id==Restaurant.id')


class UserFavorited(DeclarativeBase):
    __table__ = User_Favorited


    #relation definitions
    User = relation('User', primaryjoin='UserFavorited.user_id==User.id')
    Restaurant = relation('Restaurant', primaryjoin='UserFavorited.restaurant_id==Restaurant.id')


class UserProfile(DeclarativeBase):
    __tablename__ = 'User_Profile'

    __table_args__ = {}

    #column definitions
    gender = Column(u'gender', VARCHAR(length=255), nullable=False)
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    mugshot = Column(u'mugshot', VARCHAR(length=100), nullable=False)
    user_id = Column(u'user_id', INTEGER(), ForeignKey('User.id'), nullable=False)

    #relation definitions
    User = relation('User', primaryjoin='UserProfile.user_id==User.id')


class UserRegistration(DeclarativeBase):
    __tablename__ = 'User_Registration'

    __table_args__ = {}

    #column definitions
    activation_key = Column(u'activation_key', VARCHAR(length=40), nullable=False)
    activation_notification_send = Column(u'activation_notification_send', Integer(), nullable=False)
    email_confirmation_key = Column(u'email_confirmation_key', VARCHAR(length=40), nullable=False)
    email_confirmation_key_created = Column(u'email_confirmation_key_created', DATETIME())
    email_unconfirmed = Column(u'email_unconfirmed', VARCHAR(length=75), nullable=False)
    id = Column(u'id', INTEGER(), primary_key=True, nullable=False)
    last_active = Column(u'last_active', DATETIME())
    user_id = Column(u'user_id', INTEGER(), ForeignKey('User.id'), nullable=False)

    #relation definitions
    User = relation('User', primaryjoin='UserRegistration.user_id==User.id')